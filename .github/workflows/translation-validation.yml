name: translation-validation

on:
  pull_request_target:
    paths-ignore:
      - '**/*.md'
      - '**/*.mdx'
      - 'docs/**'
      - '**/docs/**'

jobs:
  validate:
    permissions:
      contents: write
      pull-requests: write
      checks: write
    runs-on: ubuntu-latest
    # Only run for org members OR if external PR is labeled as safe
    if: |
      github.event.pull_request.head.repo.full_name == github.repository ||
      contains(github.event.pull_request.labels.*.name, 'safe-to-run-ci')
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v4
        with:
          node-version: 24.9.0
          cache: npm
      - run: npm ci
      - name: Validate translations
        id: validate_translations
        continue-on-error: true
        run: |
          set -o pipefail
          npm run validate-translations --workspace=akari | tee translation-validation.txt
      - name: Comment translation validation results
        if: always() && github.event_name == 'pull_request'
        uses: actions/github-script@v7
        env:
          VALIDATION_OUTCOME: ${{ steps.validate_translations.outcome }}
        with:
          github-token: ${{ github.token }}
          script: |
            const fs = require('fs');

            const marker = '<!-- translation-validation -->';
            const heading = '### Translation validation';
            const outcome = process.env.VALIDATION_OUTCOME === 'success' ? 'success' : 'failure';

            let output = '(no output captured)';
            if (fs.existsSync('translation-validation.txt')) {
              const raw = fs.readFileSync('translation-validation.txt', 'utf8').trim();
              if (raw) {
                output = raw.replace(/\r\n/g, '\n');
              }
            }

            const summary =
              outcome === 'success'
                ? '✅ Translation validation passed'
                : '❌ Translation validation failed';

            const body = `${marker}\n${heading}\n\n<details><summary>${summary}</summary>\n\n\`\`\`\n${output}\n\`\`\`\n</details>`;

            const { owner, repo } = context.repo;
            const issue_number = context.issue.number;
            const comments = await github.paginate(github.rest.issues.listComments, {
              owner,
              repo,
              issue_number,
            });

            const existing = comments.find((comment) =>
              comment.body && comment.body.includes(marker)
            );

            if (existing) {
              await github.rest.issues.updateComment({
                owner,
                repo,
                comment_id: existing.id,
                body,
              });
            } else {
              await github.rest.issues.createComment({
                owner,
                repo,
                issue_number,
                body,
              });
            }
      - name: Fail if translation validation failed
        if: steps.validate_translations.outcome == 'failure'
        run: exit 1
